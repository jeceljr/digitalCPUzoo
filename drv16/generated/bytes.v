/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


// converts internal word data into bytes for LB, LBU and SB instructions
module bytes (
  input [15:0] dIn, // word coming from memory
  input sign, // indicates that the byte extension should be signed
  input word, // word memory access (not byte)
  input A0, // selects between even and odd bytes
  input [15:0] fromRS2, // word data from register (top 8 bits will be ignored on byte access)
  output [15:0] dOut, // word to be sent to memory
  output [15:0] toRD // bytes to word

);
  wire [7:0] s0;
  wire [7:0] s1;
  wire [7:0] s2;
  wire [7:0] s3;
  wire [7:0] s4;
  wire [7:0] s5;
  wire [7:0] s6;
  wire [7:0] s7;
  wire [7:0] s8;
  wire [7:0] s9;
  wire s10;
  assign s1 = dIn[7:0];
  assign s6 = dIn[15:8];
  assign s0 = fromRS2[7:0];
  assign s4 = fromRS2[15:8];
  Mux_2x1_NBits #(
    .Bits(8)
  )
  Mux_2x1_NBits_i0 (
    .sel( A0 ),
    .in_0( s0 ),
    .in_1( s1 ),
    .out( s2 )
  );
  Mux_2x1_NBits #(
    .Bits(8)
  )
  Mux_2x1_NBits_i1 (
    .sel( A0 ),
    .in_0( s6 ),
    .in_1( s0 ),
    .out( s3 )
  );
  Mux_2x1_NBits #(
    .Bits(8)
  )
  Mux_2x1_NBits_i2 (
    .sel( A0 ),
    .in_0( s1 ),
    .in_1( s6 ),
    .out( s7 )
  );
  Mux_2x1_NBits #(
    .Bits(8)
  )
  Mux_2x1_NBits_i3 (
    .sel( word ),
    .in_0( s3 ),
    .in_1( s4 ),
    .out( s5 )
  );
  assign s10 = (s7[7] & sign);
  assign dOut[7:0] = s2;
  assign dOut[15:8] = s5;
  assign s8[0] = s10;
  assign s8[1] = s10;
  assign s8[2] = s10;
  assign s8[3] = s10;
  assign s8[4] = s10;
  assign s8[5] = s10;
  assign s8[6] = s10;
  assign s8[7] = s10;
  Mux_2x1_NBits #(
    .Bits(8)
  )
  Mux_2x1_NBits_i4 (
    .sel( word ),
    .in_0( s8 ),
    .in_1( s6 ),
    .out( s9 )
  );
  assign toRD[7:0] = s7;
  assign toRD[15:8] = s9;
endmodule
