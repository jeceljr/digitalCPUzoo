/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */
module DIG_D_FF_1bit
#(
    parameter Default = 0
)
(
   input D,
   input C,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module DIG_Register_BUS #(
    parameter Bits = 1
)
(
    input C,
    input en,
    input [(Bits - 1):0]D,
    output [(Bits - 1):0]Q
);

    reg [(Bits - 1):0] state = 'h0;

    assign Q = state;

    always @ (posedge C) begin
        if (en)
            state <= D;
   end
endmodule

module Mux_2x1
(
    input [0:0] sel,
    input in_0,
    input in_1,
    output reg out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module DIG_Register
(
    input C,
    input en,
    input D,
    output Q
);

    reg  state = 'h0;

    assign Q = state;

    always @ (posedge C) begin
        if (en)
            state <= D;
   end
endmodule

module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


// allows an instruction's register field to be replaced by the PC (register zero) and detects when special handling is needed
module r0 (
  input [3:0] rin, // a register field from the instruction
  input pc, // replaced incoming register with 0 (pc)
  output [3:0] rout, // register field for the rest of the processor
  output z // indicates that rin was zero and pc was not selected

);
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i0 (
    .sel( pc ),
    .in_0( rin ),
    .in_1( 4'b0 ),
    .out( rout )
  );
  assign z = (~ pc & ~ rin[0] & ~ rin[1] & ~ rin[2] & ~ rin[3]);
endmodule

// generates control signals for execution cycles (created by Digital from truth table)
module execPLA (
  input IR3,
  input IR2,
  input IR1,
  input IR0,
  input imm,
  output selImm,
  output selConst,
  output sub,
  output logic,
  output aPC,
  output lowImm,
  output rd,
  output wr,
  output we,
  output sign,
  output word,
  output selRd,
  output slt
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  assign logic = (IR2 & IR3);
  assign s3 = ~ IR3;
  assign s2 = ~ IR2;
  assign s1 = ~ IR1;
  assign s0 = ~ IR0;
  assign selImm = ((s0 & s1 & s2) | (s1 & s3) | (IR2 & s3) | (IR3 & imm));
  assign selConst = (s2 & s3);
  assign sub = (IR1 & s2);
  assign aPC = (IR0 & s1 & s2 & s3);
  assign lowImm = (IR1 & s3);
  assign rd = ((s0 & s1 & s2) | (s1 & IR2 & s3));
  assign wr = (IR1 & IR2 & s3);
  assign we = (s1 | IR3);
  assign selRd = ((s0 & s1 & s2) | (IR2 & s3));
  assign slt = (IR0 & IR1 & s2);
  assign sign = IR2;
  assign word = IR0;
endmodule

// generates control signals for datapath
module controlUnit (
  input clock, // controls internal registers
  input reset, // when high forces the PC to 0x0000
  input [15:0] dIn, // data from memory
  input NE, // A ~= B
  input GE, // A >= B
  output wr, // memory write cycle
  output rd, // memory read cycle
  output sign, // not LBU
  output word, // not SB, LB or LBU
  output sub, // change addition to subtraction
  output logic, // select logic operation instead of addition
  output [1:0] logSelect, // selects between shift right, AND, OR, XOR
  output [15:0] Imm, // saved from prefix instruction and 4 bits from the current instruction
  output selImm, // B is immediate
  output Azero, // force A to 0
  output we, // updates register Rw
  output [3:0] Rw, // register to be written
  output [3:0] Ra, // first register to read
  output [3:0] Rb, // second register to read
  output selRd, // selects betweenALU result and memory for write back
  output slt // ignores ALU result and use GE?0x0000:0x0001

);
  wire [3:0] Rb_temp;
  wire F;
  wire [15:0] s0;
  wire [3:0] s1;
  wire [11:0] s2;
  wire [3:0] s3;
  wire [3:0] s4;
  wire s5;
  wire [11:0] s6;
  wire s7;
  wire E;
  wire rst;
  wire zD;
  wire s8;
  wire zS1;
  wire IR0;
  wire IR1;
  wire IR2;
  wire IR3;
  wire s9;
  wire alt;
  wire s10;
  wire cond;
  wire s11;
  wire s12;
  wire s_imm;
  wire [11:0] s13;
  wire s14;
  wire [3:0] s15;
  wire [15:0] s16;
  wire s17;
  wire [15:0] s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire s23;
  wire s24;
  wire s25;
  wire s26;
  wire s27;
  wire s28;
  wire s29;
  wire s30;
  wire s31;
  wire [12:0] s32;
  wire [12:0] s33;
  wire [12:0] s34;
  wire s35;
  wire JorB;
  wire s36;
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i0 (
    .D( reset ),
    .C( clock ),
    .Q( rst )
  );
  // IR
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i1 (
    .D( dIn ),
    .C( clock ),
    .en( F ),
    .Q( s0 )
  );
  // fetch
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i2 (
    .D( s7 ),
    .C( clock ),
    .Q( F ),
    .\~Q ( E )
  );
  assign s7 = (E | rst | (~ dIn[0] & ~ dIn[1] & ~ dIn[2] & ~ dIn[3] & F));
  Mux_2x1 Mux_2x1_i3 (
    .sel( IR0 ),
    .in_0( NE ),
    .in_1( GE ),
    .out( s9 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i4 (
    .D( s10 ),
    .C( clock ),
    .Q( cond )
  );
  // prefix
  DIG_Register DIG_Register_i5 (
    .D( s11 ),
    .C( clock ),
    .en( F ),
    .Q( s12 )
  );
  // IM
  DIG_Register_BUS #(
    .Bits(12)
  )
  DIG_Register_BUS_i6 (
    .D( s6 ),
    .C( clock ),
    .en( F ),
    .Q( s13 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i7 (
    .D( E ),
    .C( clock ),
    .Q( s5 )
  );
  assign Azero = (rst | (~ s8 & zS1));
  assign s18[0] = 1'b0;
  assign s18[1] = ~ (s36 | rst);
  assign s18[15:2] = 14'b0;
  assign s33[0] = 1'b1;
  assign s33[1] = ((IR1 & ~ cond) | ~ JorB | rst);
  assign s33[2] = 1'b0;
  assign s33[3] = 1'b0;
  assign s33[4] = (IR1 | ~ JorB | ~ alt);
  assign s33[5] = (IR1 & JorB);
  assign s33[6] = 1'b1;
  assign s33[7] = 1'b0;
  assign s33[8] = 1'b1;
  assign s33[9] = 1'b0;
  assign s33[10] = 1'b0;
  assign s33[11] = 1'b0;
  assign s33[12] = 1'b0;
  assign s1 = s0[3:0];
  assign s2 = s0[15:4];
  Mux_2x1_NBits #(
    .Bits(12)
  )
  Mux_2x1_NBits_i8 (
    .sel( s5 ),
    .in_0( s2 ),
    .in_1( 12'b0 ),
    .out( s6 )
  );
  assign Rb_temp = s2[3:0];
  assign s3 = s2[7:4];
  assign s4 = s2[11:8];
  assign IR0 = s1[0];
  assign IR1 = s1[1];
  assign IR2 = s1[2];
  assign IR3 = s1[3];
  r0 r0_i9 (
    .rin( s4 ),
    .pc( F ),
    .rout( Rw ),
    .z( zD )
  );
  assign s11 = (~ IR3 & ~ IR2 & ~ IR1 & ~ IR0);
  assign s_imm = (s12 | ~ IR3);
  assign JorB = (~ IR3 & ~ IR2 & (IR1 | IR0));
  assign logSelect[0] = IR1;
  assign logSelect[1] = IR0;
  execPLA execPLA_i10 (
    .IR3( IR3 ),
    .IR2( IR2 ),
    .IR1( IR1 ),
    .IR0( IR0 ),
    .imm( s_imm ),
    .selImm( s19 ),
    .selConst( s20 ),
    .sub( s21 ),
    .logic( s22 ),
    .aPC( s23 ),
    .lowImm( s24 ),
    .rd( s25 ),
    .wr( s26 ),
    .we( s27 ),
    .sign( s28 ),
    .word( s29 ),
    .selRd( s30 ),
    .slt( s31 )
  );
  assign s32[0] = s19;
  assign s32[1] = s20;
  assign s32[2] = s21;
  assign s32[3] = s22;
  assign s32[4] = s23;
  assign s32[5] = s24;
  assign s32[6] = s25;
  assign s32[7] = s26;
  assign s32[8] = (~ zD & s27);
  assign s32[9] = s28;
  assign s32[10] = s29;
  assign s32[11] = s30;
  assign s32[12] = s31;
  Mux_2x1_NBits #(
    .Bits(13)
  )
  Mux_2x1_NBits_i11 (
    .sel( F ),
    .in_0( s32 ),
    .in_1( s33 ),
    .out( s34 )
  );
  assign s35 = s34[0];
  assign sub = s34[2];
  assign logic = s34[3];
  assign s8 = s34[4];
  assign s14 = s34[5];
  assign rd = s34[6];
  assign wr = s34[7];
  assign we = s34[8];
  assign sign = s34[9];
  assign word = s34[10];
  assign selRd = s34[11];
  assign slt = s34[12];
  r0 r0_i12 (
    .rin( s3 ),
    .pc( s8 ),
    .rout( Ra ),
    .z( zS1 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i13 (
    .sel( s14 ),
    .in_0( Rb_temp ),
    .in_1( s4 ),
    .out( s15 )
  );
  assign s36 = (~ F & (~ Rb_temp[0] & ~ Rb_temp[1] & ~ Rb_temp[2] & ~ Rb_temp[3]) & ~ s35);
  assign selImm = (s36 | s35);
  assign s17 = (s36 | s34[1]);
  assign alt = s15[0];
  assign s10 = (s9 ^ ~ alt);
  assign s16[0] = (~ ((JorB & ~ F) | F) & alt);
  assign s16[3:1] = s15[3:1];
  assign s16[15:4] = s13;
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i14 (
    .sel( s17 ),
    .in_0( s16 ),
    .in_1( s18 ),
    .out( Imm )
  );
  assign Rb = Rb_temp;
endmodule
